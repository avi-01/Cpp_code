{
	// Place your C++ workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"for": {
		"scope": "cpp",
		"prefix": "for",
		"body": [ "for(int ${1:i} = 0; ${1:i} < ${2:n}; ${1:i}++) {",
			"    ${0:}",
			"}"
		],
		"description": "Simple for loop"
	},
	"reverseFor": {
		"scope": "cpp",
		"prefix": "forr",
		"body": [ "for(int ${1:i} = ${2:n}-1; ${1:i} >= 0; ${1:i}--) {",
			"    ${0:}",
			"}"
		],
		"description": "Reverse for loop"
	},
	"autoFor": {
		"prefix": "fora",
		"body": [
		  "for(auto ${1:i}:${2:v}) {",
		  "    ${0:}  ",
		  "}",
		  ""
		],
		"description": "Auto for loop"
	  },
	"comparator": {
		"prefix": "comp",
		"body": [
		  "bool cmp (const pair<ll,ll> &a,const pair<ll,ll> &b) {",
		  "    if(a.first == b.first) {",
		  "        return a.second > b.second;",
		  "    }",
		  "    return a.first < b.first;",
		  "}  "
		],
		"description": "Comparator for vector"
	  },
	  "Struct comparator": {
		"prefix": "scomp",
		"body": [
		  "",
		  "struct comp {",
		  "bool operator()(pair<ll,ll> a, pair<ll,ll> b) {",
		  "    if(a.first == b.first) {",
		  "        return a.second > b.second;",
		  "    }",
		  "    return a.first < b.first;",
		  "}  ",
		  "};",
		  ""
		],
		"description": "Comparator for set"
	  },
	  "modularExponentiation": {
		"prefix": "modexpo",
		"body": [
		  "ll modularExponentiation(ll x,ll n,ll M){",
		  "    if(n==0)",
		  "        return 1;",
		  "    else if(n%2 == 0)",
		  "        return modularExponentiation((x*x)%M,n/2,M);",
		  "    return (x*modularExponentiation((x*x)%M,(n-1)/2,M))%M;",
		  "}"
		],
		"description": "modular exponentiation"
	  },
	  "binaryExponentiation": {
		"prefix": "binexpo",
		"body": [
		  "",
		  "ll binaryExponentiation(ll x,ll n){",
		  "    if(n==0)",
		  "        return 1;",
		  "    else if(n%2 == 0)        ",
		  "        return binaryExponentiation(x*x,n/2);",
		  "    else                            ",
		  "        return x*binaryExponentiation(x*x,(n-1)/2);",
		  "}"
		],
		"description": "binaryExponentiation"
	  },
	  "GCD": {
		"prefix": "gcd",
		"body": [
		  "",
		  "ll GCD(ll A, ll B) {",
		  "    if(B==0)",
		  "        return A;",
		  "    else",
		  "        return GCD(B, A % B);",
		  "}"
		],
		"description": "GCD"
	  },
	  "extended_GCD": {
		"prefix": "exGCD",
		"body": [
		  "   ",
		  "ll extended_GCD(ll a , ll b , ll &x , ll &y){",
		  "    if(a == 0){",
		  "        x = 0;",
		  "        y = 1;",
		  "        return b;",
		  "    }",
		  "    ll x1 , y1;",
		  "    ll gcd = extended_GCD(b%a , a , x1 , y1);",
		  "    x = y1 - (b/a)*x1; ",
		  "    y = x1;",
		  "    return gcd; ",
		  "}"
		],
		"description": "extended_GCD"
	  },
	  "mod extended inv": {
		"prefix": "modextinv",
		"body": [
		  "ll modExtendedInv(ll a , ll mod){",
		  "    ll x , y;",
		  "    extended_GCD(a , mod , x , y);",
		  "    if(x < 0) x += mod;",
		  "    return x;",
		  "}"
		],
		"description": "mod extended inv"
	  },
	  "modPrimeInverse": {
		"prefix": "modinv",
		"body": [
		  "ll modPrimeInverse(ll A,ll M){",
		  "    return modularExponentiation(A,M-2,M);",
		  "}"
		],
		"description": "modPrimeInverse"
	  },
	  "factors": {
		"prefix": "factors",
		"body": [
		  "",
		  "ll minPrime[Ns];",
		  "void factorSieve(ll n){",
		  "    memset(minPrime,0,sizeof(minPrime));",
		  "    for (ll i = 2; i * i <= n; ++i) {",
		  "        if (minPrime[i] == 0) {",
		  "            for (ll j = i * i; j <= n; j += i) {",
		  "                if (minPrime[j] == 0) {",
		  "                    minPrime[j] = i;",
		  "                }",
		  "            }",
		  "        }",
		  "    }",
		  "    for (ll i = 2; i <= n; ++i) {",
		  "        if (minPrime[i] == 0) {",
		  "            minPrime[i] = i;",
		  "        }",
		  "    }",
		  "}",
		  "",
		  "map<ll,ll> factorize(ll n) {",
		  "",
		  "    map<ll,ll> m;",
		  "    m.clear();",
		  "    while (n != 1) {",
		  "        m[minPrime[n]]++;",
		  "        n /= minPrime[n];",
		  "    }",
		  "",
		  "",
		  "    return m;",
		  "    ",
		  "}"
		],
		"description": "factors"
	  },
	  "MergeSort": {
		"prefix": "mergesort",
		"body": [
		  "",
		  "    ",
		  "void merge(ll A[ ] , ll start, ll mid, ll end) {",
		  "    ll p = start ,q = mid+1;",
		  "    ",
		  "    ll Arr[end-start+1] , k=0;",
		  "    ",
		  "    for(ll i = start ;i <= end ;i++) {",
		  "        if(p > mid)     ",
		  "        Arr[ k++ ] = A[ q++] ;",
		  "    ",
		  "    else if ( q > end) ",
		  "        Arr[ k++ ] = A[ p++ ];",
		  "    ",
		  "    else if( A[ p ] < A[ q ])",
		  "        Arr[ k++ ] = A[ p++ ];",
		  "    ",
		  "    else",
		  "        Arr[ k++ ] = A[ q++];",
		  "    }",
		  "    for (ll p=0 ; p< k ;p ++) {",
		  "        A[ start++ ] = Arr[ p ] ;                          ",
		  "    }",
		  "}",
		  "    ",
		  "void merge_sort (ll A[ ] , ll start , ll end ){",
		  "    if( start < end )",
		  "    {",
		  "        ll mid = (start + end ) / 2 ;          ",
		  "        merge_sort (A, start , mid ) ;",
		  "        merge_sort (A,mid+1 , end ) ;         ",
		  "    ",
		  "        merge(A,start , mid , end );   ",
		  "    }                    ",
		  "}",
		  "    "
		],
		"description": "Merge Sort"
	  },
	  "binarySearch": {
		"prefix": "binsearch",
		"body": [
		  "",
		  "ll binarySearch(ll a[],ll low,ll high,ll key){",
		  "    while(low<=high)",
		  "    {",
		  "        ll mid=(low+high)/2;",
		  "        if(a[mid]<key)",
		  "        {",
		  "            low=mid+1;",
		  "        }",
		  "        else if(a[mid]>key)",
		  "        {",
		  "            high=mid-1;",
		  "        }",
		  "        else",
		  "        {",
		  "            return mid;",
		  "        }",
		  "    }",
		  "    return -1;",
		  "}"
		],
		"description": "binarySearch"
	  }
}